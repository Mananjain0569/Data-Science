# -*- coding: utf-8 -*-
"""All Data Visualizations in Data Science using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n_0PrM1cgvuRlz9QeR-vWtu-LExmrxeG

***All Data Visualizations in Data Science using Python***

*   Line plot and important matplotlib functions
*   Bar plot
*   Histogram and density plots
*   Scatter plot
*   User funnels
*   Heatmap
*   Pie Chart
*   Donut plot
*   Box plot
*   Time Series Graph
*   Violin plot
*   Tree Map
*   Plotting annotation
*   Word cloud
*   Choropleth map

****

***All Data Visualizations in Data Science using Python Part 1 (02-05-2024)***
"""

#importing csv file
file_path = '/content/archive.zip'

import pandas as pd

df = pd.read_csv(file_path)

"""**Line plot and Most Important Matplotlib Functions for Data Science**"""

import pandas as pd
import matplotlib.pyplot as plt

print(df.head())

"""Creating a Line Plot"""

plt.plot(df["USERNAME"], "-r", label="USERNAME")
plt.plot(df["Hashtags"], "-g", label="Hashtags")
plt.plot(df["Time since posted"], "-b", label="Time since posted")
plt.plot(df["Likes"], "-k", label="Likes")
plt.show()                        # for visualizing your graph

"""Customizing Figure Size"""

plt.figure(figsize=(15, 10)) # Customizing Figure Size
plt.plot(df["USERNAME"], "-r", label="Username")
plt.plot(df["Hashtags"], "-g", label="Hashtags")
plt.plot(df["Time since posted"], "-b", label="Time since posted")
plt.plot(df["Likes"], "-k", label="Likes")
plt.show()

"""Customizing Theme"""

plt.style.use('fivethirtyeight')           # for customizing theme
plt.figure(figsize=(15, 10))
plt.plot(df["USERNAME"], "-r", label="USERNAME")
plt.plot(df["Hashtags"], "-g", label="Hashtags")
plt.plot(df["Time since posted"], "-b", label="Time since posted")
plt.plot(df["Likes"], "-k", label="Likes")
plt.show()

"""Adding Title"""

plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(df["USERNAME"], "-r", label="USERNAME")
plt.plot(df["Hashtags"], "-g", label="Hashtags")
plt.plot(df["Time since posted"], "-b", label="Time since posted")
plt.plot(df["Likes"], "-k", label="Likes")
plt.title("Impressions on Instagram")                  # for adding a title
plt.show()

"""Adding Labels on the Axes"""

plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(df["USERNAME"], "-r", label="USERNAME")
plt.plot(df["Hashtags"], "-g", label="Hashtags")
plt.plot(df["Time since posted"], "-b", label="Time since posted")
plt.plot(df["Likes"], "-k", label="Likes")
plt.title("Impressions on Instagram")
plt.xlabel("Days") # adding label on xaxis
plt.ylabel("Impressions") # adding label on yaxis
plt.show()

"""Adding Legend"""

plt.style.use('fivethirtyeight')
plt.figure(figsize=(15, 10))
plt.plot(df["USERNAME"], "-r", label="USERNAME")
plt.plot(df["Hashtags"], "-g", label="Hashtags")
plt.plot(df["Time since posted"], "-b", label="Time since posted")
plt.plot(df["Likes"], "-k", label="Likes")
plt.title("Impressions on Instagram")
plt.xlabel("Days")
plt.ylabel("Impressions")
plt.legend(title="Instagram Reach") # for adding legend with a title
plt.show()

"""Link : https://thecleverprogrammer.com/2022/03/24/important-matplotlib-functions-for-data-science/

**Bar plot**
"""

import pandas as pd
import matplotlib.pyplot as plt
data = [5., 25., 50., 20.]
plt.bar(range(len(data)), data)
plt.show()

"""increase the thickness of the bars"""

data = [5., 25., 50., 20.]
plt.bar(range(len(data)), data, width=1.)
plt.show()

"""Horizontal Bar Plots with Python"""

import pandas as pd
import matplotlib.pyplot as plt
data = [5., 25., 50., 20.]
plt.barh(range(len(data)), data)
plt.show()

"""Multiple Bar Plots with Python"""

import numpy as np
data = [[5., 25., 50., 20.],
        [4., 23., 51., 17.],
        [6., 22., 52., 19.]]
x = np.arange(4)
plt.bar(x + 0.00, data[0], color='b', width=0.25)
plt.bar(x + 0.25, data[1], color='r', width=0.25)
plt.bar(x + 0.50, data[2], color='g', width=0.25)
plt.show()

"""Stacked bar charts with python"""

a = [5., 30., 45., 22.]
b = [5., 25., 50., 20.]
x = range(4)
plt.bar(x, a, color='b')
plt.bar(x, b, color='r', bottom=a)
plt.show()

"""Link : https://thecleverprogrammer.com/2020/12/24/bar-plots-with-python/

**Histogram and density plots**

histogram using Python
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

data = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['x', 'y'])
plt.hist(data["x"], alpha=0.5)
plt.hist(data["y"], alpha=0.5)
plt.show()

"""density plot using Python"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

data = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['x', 'y'])
sns.kdeplot(data["x"], shade=True)
sns.kdeplot(data["y"], shade=True)
plt.show()

"""histograms and density plots at once"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

data = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['x', 'y'])
sns.distplot(data['x'])
sns.distplot(data['y'])
plt.show()

"""Link : https://thecleverprogrammer.com/2021/03/30/histogram-and-density-plots-using-python/

**Scatter plot**

Scatter Plot with Python using Matplotlib
"""

import numpy as np
import matplotlib.pyplot as plt
rng = np.random.RandomState(0)
x = rng.randn(100)
y = rng.randn(100)
colors = rng.rand(100)
sizes = 1000 * rng.rand(100)

plt.scatter(x, y, c=colors, s=sizes, alpha=0.3,
            cmap='viridis')
plt.colorbar()
plt.show()

"""the densely populated areas with bigger circles and the areas with high prices with darker circles and vice versa"""

import pandas as pd
housing = pd.read_csv("https://raw.githubusercontent.com/ageron/handson-ml/master/datasets/housing/housing.csv")
housing.plot(kind='scatter', x='longitude', y='latitude', alpha=0.4, s=housing['population']/100, label='population',
figsize=(12, 8), c='median_house_value', cmap=plt.get_cmap('jet'), colorbar=True)
plt.legend()
plt.show()

"""Link : https://thecleverprogrammer.com/2020/12/20/scatter-plot-with-python/

**User funnels**
"""

#importing csv file
file_path = '/content/user_data.csv'

import pandas as pd

data = pd.read_csv(file_path)

"""stages in this dataset"""

print(data["stage"].value_counts())

"""analyze user funnels"""

import plotly.graph_objects as go
import plotly.io as pio
pio.templates.default = "plotly_white"

#define the funnel stages
funnel_stages = ['homepage', 'product_page', 'cart', 'checkout', 'purchase']

#calculate the number of users and conversions for each stage
num_users = []
num_conversions = []

for stage in funnel_stages:
    stage_users = data[data['stage'] == stage]
    num_users.append(len(stage_users))
    num_conversions.append(stage_users['conversion'].sum())

#create a funnel chart
fig = go.Figure(go.Funnel(
    y=funnel_stages,
    x=num_users,
    textposition='inside',
    textinfo='value',
    name='Users'
))

fig.add_trace(go.Funnel(
    y=funnel_stages,
    x=num_conversions,
    textposition='inside',
    textinfo='value',
    name='Conversions'
))

fig.update_layout(
    title='Funnel Analysis',
    funnelmode='stack'
)

fig.show()

"""Link : https://thecleverprogrammer.com/2023/04/05/user-funnel-analysis-using-python/

****

***All Data Visualizations in Data Science using Python Part 2 (03-05-2024)***

**Heatmaps**
"""

#importing csv file
file_path = '/content/MoviesOnStreamingPlatforms.csv'

import pandas as pd

movies = pd.read_csv(file_path)

"""a heatmap using Python"""

import pandas as pd

movies = pd.read_csv(file_path)

# Remove rows where 'Rotten Tomatoes' is not a float
movies = movies[pd.to_numeric(movies['Rotten Tomatoes'], errors='coerce').notnull()]

# Convert the 'Rotten Tomatoes' values to floats
movies['Rotten Tomatoes'] = movies['Rotten Tomatoes'].astype(float)

# Drop the 'Type' column
movies.drop("Type", inplace=True, axis=1)

# Calculate the correlations
correlations = movies.corr(method='pearson')

# Create a heatmap of the correlations
import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(correlations, cmap="coolwarm")
plt.show()

"""plot the degree of relationship on the heatmap"""

sns.heatmap(correlations, cmap="coolwarm", annot=True)
plt.show()

"""Link : https://thecleverprogrammer.com/2021/04/10/heatmap-using-python-tutorial/

**Pie chart**

Pie Charts using Python
"""

import matplotlib.pyplot as plt
data = [20, 50, 30, 60]
plt.pie(data)
plt.show()

"""according to the dataset"""

#importing csv file
file_path = '/content/covid_19_clean_complete.csv'

import pandas as pd

df = pd.read_csv(file_path)

import pandas as pd

group_size = [sum(df.Confirmed), sum(df.Active), sum(df.Recovered)]
group_labels = ["Confirmed\n"+str(sum(df.Confirmed)),
                "Active\n"+str(sum(df.Active)),
                "Recovered\n"+str(sum(df.Recovered))]
custom_colors = ["skyblue", "yellowgreen", 'tomato']
plt.figure(figsize=(5, 5))
plt.pie(group_size, labels=group_labels, colors=custom_colors)
plt.rc('font', size=12)
plt.title("Total Confirmed, Active, and Recovered", fontsize=20)
plt.show()

"""the distribution of top 5 places with active cases"""

df.drop(df.tail(1).index, inplace = True)
df1 = df.sort_values(by='Active', ascending=False)
df3 = df1[:5]
df.rename(columns={'Province/State': 'state_name'}, inplace=True)
df3 = df1[:5]
states = df3['state_name']
active = df3.Active
colours = ["skyblue", "blue", "purple", "yellow", "red"]
plt.figure(figsize=(7,7))
plt.pie(active, labels=states, colors=colours)
plt.rc('font', size=12)
plt.title("Top 5 Places With Active cases", fontsize=20)
plt.show()

"""Link : https://thecleverprogrammer.com/2021/02/12/pie-charts-using-python/

**Donut Plot**
"""

#importing csv file
file_path = '/content/covid_19_clean_complete.csv'

import pandas as pd

df = pd.read_csv(file_path)

"""create a donut plot with Python"""

import seaborn as sns
import matplotlib.pyplot as plt
group_size = [sum(df.Confirmed), sum(df.Deaths), sum(df.Recovered)]
group_labels = ["Confirmed\n"+str(sum(df.Confirmed)),
                "Deaths\n"+str(sum(df.Deaths)),
                "Recovered\n"+str(sum(df.Recovered))]
custom_colors = ["skyblue", "yellowgreen", 'tomato']
plt.figure(figsize=(5, 5))
plt.pie(group_size, labels=group_labels, colors=custom_colors)
central_circle = plt.Circle((0, 0), 0.5, color='white')
fig = plt.gcf()
fig.gca().add_artist(central_circle)
plt.rc('font', size=12)
plt.title("Total Confirmed, Deaths, and Recovered Cases", fontsize=20)
plt.show()

"""sort the values according to the highest Confirmed cases"""

df.drop(df.tail(1).index, inplace = True)
df1 = df.sort_values(by='Confirmed', ascending=False)
df3 = df1[:5]

"""the top 5 states in India with the highest confirmed cases of Covid 19"""

# Assuming that the data is in the df3 DataFrame
states = df3['Province/State']
Confirmed = df3['Confirmed']

# Rest of the code remains the same
active = df3.Active
colours = ["skyblue", "blue", "red", "yellow", "green"]
plt.figure(figsize=(7,7))
plt.pie(Confirmed, labels=states, autopct='%1.1f%%', colors=colours)
central_circle = plt.Circle((0, 0), 0.4, color='white')
fig = plt.gcf()
fig.gca().add_artist(central_circle)
plt.rc('font', size=12)
plt.title("Top 5 Confirmed cases", fontsize=20)
plt.show()

"""Link : https://thecleverprogrammer.com/2020/12/16/donut-plot-with-python/

**Box Plot**

Box Plot using Python
"""

import pandas as pd
data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/Advertising.csv")
print(data.head())

import plotly.express as px
fig = px.box(data, y="TV")
fig.show()

"""Link : https://thecleverprogrammer.com/2021/12/22/box-plot-using-python/

**Time Series Graph**

a time series graph using Python
"""

import pandas as pd
import yfinance as yf
import datetime
from datetime import date, timedelta
today = date.today()

d1 = today.strftime("%Y-%m-%d")
end_date = d1
d2 = date.today() - timedelta(days=360)
d2 = d2.strftime("%Y-%m-%d")
start_date = d2

data = yf.download('AAPL',
                      start=start_date,
                      end=end_date,
                      progress=False)
print(data.head())

import plotly.express as px
figure = px.line(data, x = data.index, y = "Close")
figure.show()

"""Link : https://thecleverprogrammer.com/2022/01/12/time-series-graph-using-python/

**Violin Plot**

Violin Plot using Python
"""

import seaborn as sns
import matplotlib.pyplot as plt

data = sns.load_dataset("tips")
plt.figure(figsize=(10, 8))
sns.violinplot(x=data["total_bill"])
plt.show()

"""multiple violin plots grouped based on the categorical features of the dataset"""

plt.figure(figsize=(12, 10))
sns.violinplot(x="day", y="total_bill", data=data)
plt.show()

"""Link : https://thecleverprogrammer.com/2021/07/21/violin-plot-using-python/

**Treemap**

a treemap using Python
"""

import plotly.graph_objects as go

fig = go.Figure(go.Treemap(
    labels = ["A","B", "C", "D", "E", "F", "G", "H", "I"],
    parents = ["", "A", "A", "C", "C", "A", "A", "G", "A"]
))

fig.show()

"""Link : https://thecleverprogrammer.com/2021/05/16/treemap-using-python/

**Plotting Annotations**
"""

import matplotlib.pyplot as plt
x = [3, 5, 7, 8, 4]
y = [5, 3, 7, 8, 2]
plt.scatter(x, y)
plt.show()

"""to annotate this graph using Python to make it self-explanatory"""

import matplotlib.pyplot as plt
x = [3, 5, 7, 8, 4]
y = [5, 3, 7, 8, 2]
labels = ["Jan", "Feb", "Mar", "April", "May"]
plt.scatter(x, y)
for i, j in enumerate(labels):
    plt.annotate(j, (x[i]+0.10, y[i]), fontsize=10)
plt.show()

"""Link : https://thecleverprogrammer.com/2021/02/28/plotting-annotations-using-python/

**Word Cloud**

Word Cloud from a Pandas DataFrame in Python
"""

pip install wordcloud

#import libraries and dataset
from wordcloud import WordCloud
from wordcloud import ImageColorGenerator
from wordcloud import STOPWORDS
import matplotlib.pyplot as plt
import pandas as pd
data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/spam.csv")
print(data.head())

"""a word cloud from the text column of this dataset using Python"""

text = " ".join(i for i in data.text)
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
plt.figure( figsize=(15,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""Link : https://thecleverprogrammer.com/2021/11/11/word-cloud-from-a-pandas-dataframe-in-python/

**Choropleth Map**
"""

import plotly.graph_objects as go
import pandas as pd
data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/usa.csv")
print(data.head())

figure = go.Figure(data=go.Choropleth(locations=data["code"],
                                      z = data["total exports"].astype(float),
                                      locationmode="USA-states",
                                      colorscale="Reds",
                                      colorbar_title="Millions USD"))
figure.update_layout(title_text="US Agriculture Exports", geo_scope='usa')
figure.show()

"""Link : https://thecleverprogrammer.com/2021/04/20/choropleth-map-using-python/"""